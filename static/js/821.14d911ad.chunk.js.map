{"version":3,"file":"static/js/821.14d911ad.chunk.js","mappings":"uQAAO,MAAMA,EAAcC,GAASA,EAAMC,SAE7BC,EAAoBF,GAASA,EAAMC,SAASE,MAI5CC,EAAYJ,GAASA,EAAMK,O,uBCExC,MAAMC,EAAmBC,EAAAA,GAAW,CAClCC,KAAMD,EAAAA,GACI,sBACPE,SAAS,oBACTC,IAAI,GAAI,kCACRC,QACC,0HACA,oCAEJC,OAAQL,EAAAA,GACE,wBACPE,SAAS,8BACTC,IAAI,GAAI,oCACRC,QACC,qFACA,kCAoEN,EAhEoBE,KAClB,MAAMC,GAAWC,EAAAA,EAAAA,MACXd,GAAWe,EAAAA,EAAAA,IAAYd,GAEvBe,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbX,KAAM,GACNI,OAAQ,IAEVN,iBAAkBA,EAClBc,SAAUC,IACR,MAAMC,EAAcrB,EAASsB,MAAKC,GAAMA,EAAGhB,OAASa,EAAOb,OACrDiB,EAAgBxB,EAASyB,MAAKF,GAAMA,EAAGZ,SAAWS,EAAOT,SAE/D,GAAIU,GAAeG,EAAe,CAChC,MAAME,EAAO,GAAAC,OAAMP,EAAOb,KAAI,4BAC9BqB,EAAAA,EAAAA,GAAY,QAASF,EACvB,KAAO,CACLb,GAASgB,EAAAA,EAAAA,IAAWT,IAEpB,MAAMM,EAAO,WAAAC,OAAcP,EAAOb,KAAI,2BACtCqB,EAAAA,EAAAA,GAAY,UAAWF,EACzB,CACAV,EAAOc,WAAW,IAItB,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACC,UAAU,OAAOd,SAAUH,EAAOkB,aAAaC,SAAA,EAClDC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACR7B,UAAQ,EACR8B,WAAS,EACTC,aAAa,OACbC,GAAG,OACHjC,KAAK,OACLkC,MAAM,eACNC,MAAO1B,EAAOI,OAAOb,KACrBoC,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,MAAO/B,EAAOgC,QAAQzC,MAAQ0C,QAAQjC,EAAOkC,OAAO3C,MACpD4C,WAAYnC,EAAOgC,QAAQzC,MAAQS,EAAOkC,OAAO3C,KACjD6C,GAAI,CAAEC,GAAI,MAEZjB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACR7B,UAAQ,EACR8B,WAAS,EACTC,aAAa,SACbC,GAAG,SACHjC,KAAK,SACLkC,MAAM,eACNC,MAAO1B,EAAOI,OAAOT,OACrBgC,SAAU3B,EAAO4B,aACjBC,OAAQ7B,EAAO8B,WACfC,MAAO/B,EAAOgC,QAAQrC,QAAUsC,QAAQjC,EAAOkC,OAAOvC,QACtDwC,WAAYnC,EAAOgC,QAAQrC,QAAUK,EAAOkC,OAAOvC,OACnDyC,GAAI,CAAEC,GAAI,MAEZjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACC,KAAK,SAASjB,WAAS,EAACkB,QAAQ,YAAYJ,GAAI,CAAEK,GAAI,EAAGJ,GAAI,GAAIlB,SAAC,kBAGtE,E,wBCnFV,MAmBA,EAnBeuB,KACb,MAAM7C,GAAWC,EAAAA,EAAAA,MAOjB,OACEsB,EAAAA,EAAAA,KAACuB,EAAAA,EAAa,CACZrB,WAAS,EACTiB,KAAK,OACLhD,KAAK,SACLqD,YAAY,iBACZjB,SAXsBkB,IACxB,MAAMC,EAAWD,EAAME,OAAOrB,MAC9B7B,GAASmD,EAAAA,EAAAA,IAAOF,GAAU,GAUxB,E,0KClBN,QAA2B,wBAA3B,EAA6D,uBCGvDG,EAAYC,SAASC,cAAc,eAE1B,MAAMC,UAAcC,EAAAA,UACjCC,MAAAA,GACE,OAAOC,EAAAA,EAAAA,eACLnC,EAAAA,EAAAA,KAAA,OAAKoC,UAAWC,EAAatC,UAC3BC,EAAAA,EAAAA,KAAA,OAAKoC,UAAWC,EAAYtC,SAAEuC,KAAKC,MAAMxC,aAE3C8B,EAEJ,ECIF,MAyFA,EAzFgBW,IAAwC,IAArCC,SAAS,KAAEtE,EAAI,OAAEI,EAAM,GAAE6B,IAAMoC,EAChD,MAAM/D,GAAWC,EAAAA,EAAAA,OACVgE,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,IACpCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAASzE,IACtC4E,EAAcC,IAAmBJ,EAAAA,EAAAA,UAASrE,IAC1C0E,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,GAa3C,OACE5C,EAAAA,EAAAA,KAAAmD,EAAAA,SAAA,CAAApD,SACG2C,GACC1C,EAAAA,EAAAA,KAAAmD,EAAAA,SAAA,CAAApD,UACIkD,IACAjD,EAAAA,EAAAA,KAACgC,EAAK,CAAAjC,UACJJ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFoB,GAAI,CACFoC,QAAS,OACTC,eAAgB,gBAChBC,IAAK,GACLvD,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRI,MAAM,OACNC,MAAOuC,EACPtC,SAAUgD,GAAKT,EAAcS,EAAE5B,OAAOrB,UAExCN,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRI,MAAM,SACNC,MAAOyC,EACPxC,SAAUgD,GAAKP,EAAgBO,EAAE5B,OAAOrB,UAE1CN,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACE,QAAQ,WAAWoC,QAASA,IAAMb,GAAa,GAAO5C,SAAC,WAG/DC,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACE,QAAQ,YAAYoC,QAjCvBC,KACjBhF,GAASiF,EAAAA,EAAAA,IAAY,CAAEtD,GAAIA,EAAIjC,KAAM0E,EAAYtE,OAAQwE,KACzDJ,GAAa,GALbO,GAAaS,IAASA,GAMT,EA8B+C5D,SAAC,iBAQzDJ,EAAAA,EAAAA,MAAAwD,EAAAA,SAAA,CAAApD,SAAA,EACEJ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFoB,GAAI,CACFoC,QAAS,OACTQ,WAAY,iBACZ7D,SAAA,EAEFC,EAAAA,EAAAA,KAAC6D,EAAAA,EAAc,CAAA9D,UACbC,EAAAA,EAAAA,KAAC8D,EAAAA,EAAM,KAAKC,EAAAA,EAAAA,GAAa5F,QAE3B6B,EAAAA,EAAAA,KAACgE,EAAAA,EAAY,CAAAjE,SAAE5B,QAEjBwB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFoB,GAAI,CACFoC,QAAS,OACTQ,WAAY,SACZN,IAAK,GACLvD,SAAA,EAEFC,EAAAA,EAAAA,KAACiE,EAAAA,EAAI,CAACC,KAAI,OAAA3E,OAAShB,GAASwB,SAAExB,KAC9ByB,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CACH9D,MAAM,OACN+D,MAAMpE,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,IACfb,QAASA,IAAMb,GAAa,MAE9B3C,EAAAA,EAAAA,KAACmE,EAAAA,EAAI,CACH9D,MAAM,SACN+D,MAAMpE,EAAAA,EAAAA,KAACsE,EAAAA,EAAU,IACjBd,QA/DSe,IAAM9F,GAAS+F,EAAAA,EAAAA,IAAcpE,aAoE7C,ECtCP,EAxDoBqE,KAElB,MAAMhG,GAAWC,EAAAA,EAAAA,MACXgG,GAAa/F,EAAAA,EAAAA,IAAYgG,EAAAA,KAE/BC,EAAAA,EAAAA,YAAU,KACJF,GACFjG,GAASoG,EAAAA,EAAAA,MACX,GACC,CAACpG,EAAUiG,IAEd,MAAM,MAAE5G,EAAK,UAAEgH,EAAS,MAAEnE,IAAUhC,EAAAA,EAAAA,IAAYjB,GAC1CM,GAASW,EAAAA,EAAAA,IAAYZ,GAErBgH,EAAmB/G,EACrBF,EAAME,QAAOyE,GACXA,EAAQtE,KAAK6G,cAAcC,SAASjH,EAAOgH,iBAE7ClH,EAEEoH,GAAiBC,EAAAA,EAAAA,GAAc,qBAErC,OACExF,EAAAA,EAAAA,MAAAwD,EAAAA,SAAA,CAAApD,SAAA,CACG+E,IACC9E,EAAAA,EAAAA,KAACoF,EAAAA,GAAI,CAACC,WAAS,EAAChC,eAAe,SAASO,WAAW,SAAQ7D,UACzDC,EAAAA,EAAAA,KAACoF,EAAAA,GAAI,CAACE,MAAI,EAAAvF,UACRC,EAAAA,EAAAA,KAACuF,EAAAA,EAAa,CAACC,kBAAmB,EAAGC,iBAAkB,SAI5D3H,IAAUgH,IACT9E,EAAAA,EAAAA,KAAC0F,EAAAA,EAAI,CAAA3F,SACFgF,EAAiBY,KAAI,CAAClD,EAASmD,KAC9BjG,EAAAA,EAAAA,MAACkG,EAAAA,SAAc,CAAA9F,SAAA,EACbC,EAAAA,EAAAA,KAAC8F,EAAAA,GAAQ,CACP9E,GAAI,CACFoC,QAAS,OACT2C,UAAW,GACXC,OAAQd,EAAiB,EAAI,EAC7B7B,eAAgB6B,EAAiB,SAAW,gBAC5Ce,SAAU,QACVlG,UAEFC,EAAAA,EAAAA,KAACkG,EAAO,CAACzD,QAASA,MAEnBmD,IAAUb,EAAiBoB,OAAS,IAAKnG,EAAAA,EAAAA,KAACoG,EAAAA,EAAO,MAZ/B3D,EAAQrC,QAiBlCO,IAASX,EAAAA,EAAAA,KAAA,KAAAD,SAAIY,MACb,ECVP,EA3CiB0F,KACf,MAAOC,EAAaC,IAAkB3D,EAAAA,EAAAA,WAAS,IAE/CgC,EAAAA,EAAAA,YAAU,KAGR,MAAM4B,EAAYC,YAAW,KAC3BF,GAAe,EAAK,GACnB,KAGH,MAAO,IAAMG,aAAaF,EAAU,GACnC,IAEH,MAAMG,GAASC,EAAAA,EAAAA,IAAU,CACvBC,QAASP,EAAc,EAAI,EAC3BQ,UAAWR,EAAc,gBAAkB,mBAC3CS,KAAM,CAAEF,QAAS,EAAGC,UAAW,sBAGjC,OACE9G,EAAAA,EAAAA,KAACgH,EAAAA,EAAS,CACRnH,UAAU,OACVmB,GAAI,CACFiG,UAAW,EACX7D,QAAS,OACT8D,cAAe,SACftD,WAAY,UACZ7D,UAEFJ,EAAAA,EAAAA,MAACwH,EAAAA,EAAI,CAACnG,GAAI,CAAEoG,EAAG,EAAGC,SAAU,MAAOtH,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAIsH,MAAO,CAAEC,UAAW,UAAWxH,SAAC,yCACpCC,EAAAA,EAAAA,KAACwH,EAAa,KACdxH,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAACsB,EAAM,KACP3B,EAAAA,EAAAA,MAAC8H,EAAAA,EAAAA,IAAY,CAACH,MAAOX,EAAO5G,SAAA,EAC1BC,EAAAA,EAAAA,KAACyE,EAAW,IAAgB,WAGtB,C","sources":["redux/selectors.js","components/PhonebookForm/PhonebookForm.jsx","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts;\n\nexport const selectContactItem = state => state.contacts.items;\n\nexport const selectContactsArray = state => state.contacts;\n\nexport const getFilter = state => state.filter;\n","import * as yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TextField, Box, Button } from '@mui/material';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContactItem } from 'redux/selectors';\nimport createToast from 'utils/toast';\n\nconst validationSchema = yup.object({\n  name: yup\n    .string('Enter contact name')\n    .required('Name is required')\n    .max(16, 'Max 16 characters for the name')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([ ' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name contains invalid characters'\n    ),\n  number: yup\n    .string('Enter contact number')\n    .required('Contact number is required')\n    .max(20, 'Max 20 characters for the number')\n    .matches(\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n      'Invalid phone number format.'\n    ),\n});\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactItem);\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      const isExistName = contacts.find(el => el.name === values.name);\n      const isExistNumber = contacts.some(el => el.number === values.number);\n\n      if (isExistName || isExistNumber) {\n        const message = `${values.name} is already in contacts`;\n        createToast('error', message);\n      } else {\n        dispatch(addContact(values));\n\n        const message = `Contact ${values.name} successfully created!`;\n        createToast('success', message);\n      }\n      formik.resetForm();\n    },\n  });\n\n  return (\n    <Box component=\"form\" onSubmit={formik.handleSubmit}>\n      <TextField\n        required\n        fullWidth\n        autoComplete=\"name\"\n        id=\"name\"\n        name=\"name\"\n        label=\"Contact Name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.name && Boolean(formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n        sx={{ mb: 2 }}\n      />\n      <TextField\n        required\n        fullWidth\n        autoComplete=\"number\"\n        id=\"number\"\n        name=\"number\"\n        label=\"Phone Number\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={formik.touched.number && Boolean(formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n        sx={{ mb: 2 }}\n      />\n      <Button type=\"submit\" fullWidth variant=\"contained\" sx={{ mt: 3, mb: 2 }}>\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { OutlinedInput } from '@mui/material';\nimport { useDispatch } from 'react-redux';\nimport { search } from 'redux/filter/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInputChange = event => {\n    const newValue = event.target.value;\n    dispatch(search(newValue));\n  };\n\n  return (\n    <OutlinedInput\n      fullWidth\n      type=\"text\"\n      name=\"filter\"\n      placeholder=\"Search by name\"\n      onChange={handleInputChange}\n    />\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"backdrop\":\"Modal_backdrop__xTnIT\",\"content\":\"Modal_content__gGb69\"};","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport css from './Modal.module.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default class Modal extends Component {\n  render() {\n    return createPortal(\n      <div className={css.backdrop}>\n        <div className={css.content}>{this.props.children}</div>\n      </div>,\n      modalRoot\n    );\n  }\n}\n","import React, { useState } from 'react';\nimport {\n  ListItemAvatar,\n  Avatar,\n  Link,\n  Chip,\n  ListItemText,\n  Box,\n  Button,\n  TextField,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport { useDispatch } from 'react-redux';\nimport { editContact, deleteContact } from 'redux/contacts/operations';\nimport stringAvatar from 'utils/avatarCreator';\nimport Modal from 'components/Modal/Modal';\n\nconst Contact = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editedName, setEditedName] = useState(name);\n  const [editedNumber, setEditedNumber] = useState(number);\n  const [showModal, setShowModal] = useState(false);\n\n  const toggleModal = () => {\n    setShowModal(prev => !prev);\n  };\n\n  const handleEdit = () => {\n    dispatch(editContact({ id: id, name: editedName, number: editedNumber }));\n    setIsEditing(false);\n    toggleModal();\n  };\n\n  const handleDelete = () => dispatch(deleteContact(id));\n  return (\n    <>\n      {isEditing ? (\n        <>\n          {!showModal && (\n            <Modal>\n              <Box\n                sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  gap: 2,\n                }}\n              >\n                <TextField\n                  label=\"Name\"\n                  value={editedName}\n                  onChange={e => setEditedName(e.target.value)}\n                />\n                <TextField\n                  label=\"Number\"\n                  value={editedNumber}\n                  onChange={e => setEditedNumber(e.target.value)}\n                />\n                <Button variant=\"outlined\" onClick={() => setIsEditing(false)}>\n                  Close\n                </Button>\n                <Button variant=\"contained\" onClick={handleEdit}>\n                  Save\n                </Button>\n              </Box>\n            </Modal>\n          )}\n        </>\n      ) : (\n        <>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'space-between',\n            }}\n          >\n            <ListItemAvatar>\n              <Avatar {...stringAvatar(name)} />\n            </ListItemAvatar>\n            <ListItemText>{name}</ListItemText>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: 2,\n            }}\n          >\n            <Link href={`tel:${number}`}>{number}</Link>\n            <Chip\n              label=\"Edit\"\n              icon={<EditIcon />}\n              onClick={() => setIsEditing(true)}\n            ></Chip>\n            <Chip\n              label=\"Delete\"\n              icon={<DeleteIcon />}\n              onClick={handleDelete}\n            ></Chip>\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contact;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Divider, Grid, List, ListItem, useMediaQuery } from '@mui/material';\nimport AtomicSpinner from 'atomic-spinner';\nimport { getContacts, getFilter } from '../../redux/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoggedIn } from 'redux/auth/authSelectors';\nimport Contact from 'components/Contact/Contact';\n\nconst ContactList = () => {\n  // Create a Redux dispatcher\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector(getIsLoggedIn);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, isLoggedIn]);\n\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filteredContacts = filter\n    ? items.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      )\n    : items;\n\n  const isPhoneDisplay = useMediaQuery('(max-width:426px)');\n\n  return (\n    <>\n      {isLoading && (\n        <Grid container justifyContent=\"center\" alignItems=\"center\">\n          <Grid item>\n            <AtomicSpinner electronPathWidth={0} electronsPerPath={10} />\n          </Grid>\n        </Grid>\n      )}\n      {items && !isLoading && (\n        <List>\n          {filteredContacts.map((contact, index) => (\n            <React.Fragment key={contact.id}>\n              <ListItem\n                sx={{\n                  display: 'flex',\n                  columnGap: 20,\n                  rowGap: isPhoneDisplay ? 2 : 0,\n                  justifyContent: isPhoneDisplay ? 'center' : 'space-between',\n                  flexWrap: 'wrap',\n                }}\n              >\n                <Contact contact={contact} />\n              </ListItem>\n              {index !== filteredContacts.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      )}\n      {error && <b>{error}</b>}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useSpring, animated } from 'react-spring';\n\nimport { Container, Card } from '@mui/material';\nimport PhonebookForm from 'components/PhonebookForm/PhonebookForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { useEffect, useState } from 'react';\n\nconst Contacts = () => {\n  const [showContent, setShowContent] = useState(false);\n\n  useEffect(() => {\n    // Встановіть showContent в true після деякої затримки або після завантаження даних\n    // Наприклад, через setTimeout або після отримання даних з сервера\n    const timeoutId = setTimeout(() => {\n      setShowContent(true);\n    }, 1000); // Час затримки в мілісекундах (1 секунда в даному випадку)\n\n    // Очищення таймауту при розмонтуванні компонента\n    return () => clearTimeout(timeoutId);\n  }, []);\n\n  const fadeIn = useSpring({\n    opacity: showContent ? 1 : 0,\n    transform: showContent ? 'translateY(0)' : 'translateY(50px)',\n    from: { opacity: 0, transform: 'translateY(50px)' },\n  });\n\n  return (\n    <Container\n      component=\"main\"\n      sx={{\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Card sx={{ p: 4, maxWidth: 1024 }}>\n        <h1 style={{ textAlign: 'center' }}>📚 Phonebook 📞</h1>\n        <PhonebookForm></PhonebookForm>\n        <h2>Contacts</h2>\n        <Filter></Filter>\n        <animated.div style={fadeIn}>\n          <ContactList></ContactList>{' '}\n        </animated.div>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","selectContactItem","items","getFilter","filter","validationSchema","yup","name","required","max","matches","number","ContactForm","dispatch","useDispatch","useSelector","formik","useFormik","initialValues","onSubmit","values","isExistName","find","el","isExistNumber","some","message","concat","createToast","addContact","resetForm","_jsxs","Box","component","handleSubmit","children","_jsx","TextField","fullWidth","autoComplete","id","label","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","sx","mb","Button","type","variant","mt","Filter","OutlinedInput","placeholder","event","newValue","target","search","modalRoot","document","querySelector","Modal","Component","render","createPortal","className","css","this","props","_ref","contact","isEditing","setIsEditing","useState","editedName","setEditedName","editedNumber","setEditedNumber","showModal","setShowModal","_Fragment","display","justifyContent","gap","e","onClick","handleEdit","editContact","prev","alignItems","ListItemAvatar","Avatar","stringAvatar","ListItemText","Link","href","Chip","icon","EditIcon","DeleteIcon","handleDelete","deleteContact","ContactList","isLoggedIn","getIsLoggedIn","useEffect","fetchContacts","isLoading","filteredContacts","toLowerCase","includes","isPhoneDisplay","useMediaQuery","Grid","container","item","AtomicSpinner","electronPathWidth","electronsPerPath","List","map","index","React","ListItem","columnGap","rowGap","flexWrap","Contact","length","Divider","Contacts","showContent","setShowContent","timeoutId","setTimeout","clearTimeout","fadeIn","useSpring","opacity","transform","from","Container","marginTop","flexDirection","Card","p","maxWidth","style","textAlign","PhonebookForm","animated"],"sourceRoot":""}